#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#

; Some code is derived from Eitaro Fukamachi's run-prove, under the MIT license
; https://github.com/fukamachi/prove/blob/master/roswell/run-prove.ros

;cmucl crashes without verbose on
(ql:quickload '(:fiveam :iterate) :verbose (member :cmu *features*))

(defpackage :ros.script.run-fiveam
  (:use :cl
        :iterate))
(in-package :ros.script.run-fiveam)


(when (uiop:getenv "COVERALLS")
  (ql:quickload :cl-coveralls :silent t))


(defmacro apply-coveralls (exclude &rest body)
  "Wraps the body with the `with-coveralls` macro if coveralls is enabled"
  (if (uiop:getenv "COVERALLS")
    `(,(intern (string :with-coveralls) :coveralls) (:exclude ,exclude)
      ,@body)
    `(progn
      ; Need to manually load the local repository when not using coveralls
      ; This loop is a derived from code in Eitaro Fukamachi's cl-coveralls
      ; Used under the BSD 2-Clause License
      ; https://github.com/fukamachi/cl-coveralls/blob/master/src/cl-coveralls.lisp
      (loop for file in (uiop:directory-files
                          (uiop:ensure-directory-pathname
                            (uiop:getenv "TRAVIS_BUILD_DIR")))
          when (string= (pathname-type file) "asd")
            do (let ((system-name (pathname-name file)))
                 (unless (asdf:component-loaded-p system-name)
                   (ql:quickload system-name))))
      ,@body)))


(defun show-help ()
  (format t "~
Usage: fiveam-run [options] <test cases and suites>...
Loads the system with quicklisp then calls fiveam:run! with a list of the rest
of the arguments.  Each test case is parsed with read-from-string, so a list of
systems can be read and package-indentified symbols can be used.  Note that any
systems in the travis build directory are automatically loaded.
Options
--help|-h - prints this help message
--quickload|-l <sytem>        - lists an additional system to load
--coverage-exclude|-e <files> - lists files and directories to be excluded from
                                the coverage measurement")
  (uiop:quit 2))


(defun main (&rest argv)
  (when (> 1 (length argv))
    (show-help))
  (iter (generate arg-list in argv)
        (for arg = (next arg-list))
    (cond
      ((or (string= "--help" arg) (string= "-h" arg))
       (show-help))
      ((or (string= "--quickload" arg) (string= "-l" arg))
       (collect (next arg-list) into loaded-systems))
      ((or (string= "--exclude" arg) (string= "-e" arg))
       (collect (next arg-list) into excluded))
      (t
       (collect arg into tests)))
    ;evaluate tests here with `loaded-systems`, `excluded`, and `tests` in scope
    (finally
      (when loaded-systems
        (ql:quickload loaded-systems :verbose t))
      (apply-coveralls excluded
        (unless (5am:run! (mapcar 'read-from-string tests))
          (uiop:quit 1))))))
